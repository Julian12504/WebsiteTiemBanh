import React, { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'react-toastify';
import { AdminAuthContext } from '../../context/AdminAuthContext';
import './GRNDetails.css';

const GRNDetails = ({ url }) => {
  const { grnId } = useParams();
  const [grn, setGRN] = useState(null);
  const [loading, setLoading] = useState(true);
  const [supplier, setSupplier] = useState(null);
  const { token } = useContext(AdminAuthContext);
  const navigate = useNavigate();

  useEffect(() => {
    fetchGRNDetails();
  }, [grnId]);

  const fetchGRNDetails = async () => {
    try {
      setLoading(true);
      const response = await axios.get(
        `${url}/api/grn/${grnId}`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      if (response.data.success) {
        console.log('üîç GRN Details Data:', response.data.data);
        setGRN(response.data.data);

        // L·∫•y th√¥ng tin nh√† cung c·∫•p
        if (response.data.data.supplier_id) {
          fetchSupplierDetails(response.data.data.supplier_id);
        }
      } else {
        toast.error('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt phi·∫øu nh·∫≠p!');
      }
    } catch (err) {
      console.error('L·ªói khi t·∫£i chi ti·∫øt phi·∫øu nh·∫≠p:', err);
      toast.error(err.response?.data?.message || 'C√≥ l·ªói khi t·∫£i phi·∫øu nh·∫≠p!');
    } finally {
      setLoading(false);
    }
  };

  const fetchSupplierDetails = async (supplierId) => {
    try {
      const response = await axios.get(
        `${url}/api/supplier/${supplierId}`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      if (response.data.success) {
        setSupplier(response.data.data);
      }
    } catch (err) {
      console.error('L·ªói khi t·∫£i th√¥ng tin nh√† cung c·∫•p:', err);
    }
  };

  // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VNƒê
  const formatCurrency = (amount) => {
    return `${parseFloat(amount || 0).toLocaleString('vi-VN')} VNƒê`;
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Kh√¥ng x√°c ƒë·ªãnh';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const translateUnit = (unit) => {
    const unitMap = {
      'piece': 'c√°i',
      'g': 'g',
      'kg': 'kg',
      'ml': 'ml',
      'l': 'l',
      'box': 'h·ªôp',
      'pack': 'g√≥i',
      'bottle': 'chai',
      'can': 'lon'
    };
    return unitMap[unit] || unit || 'c√°i';
  };

  const calculateItemTotal = (item) => {
    const quantity = item.quantity || item.received_quantity || 0;
    const price = parseFloat(item.unit_price || 0);
    return (quantity * price).toFixed(2);
  };

  if (loading) {
    return (
      <div className="grn-details-loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i chi ti·∫øt phi·∫øu nh·∫≠p...</p>
        <small>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</small>
      </div>
    );
  }

  if (!grn) {
    return (
      <div className="grn-details-error">
        <div className="error-icon">‚ö†Ô∏è</div>
        <p>Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.</p>
        <button
          className="back-button"
          onClick={() => navigate('/grn')}
        >
          Quay l·∫°i danh s√°ch phi·∫øu nh·∫≠p
        </button>
      </div>
    );
  }

  return (
    <div className="grn-details-container">
      <div className="grn-details-header">
        <div>
          <h1>Chi ti·∫øt Phi·∫øu nh·∫≠p kho: {grn.grn_number || 'N/A'}</h1>
        </div>
        <button className="back-button" onClick={() => navigate('/grn')}>Quay l·∫°i danh s√°ch phi·∫øu nh·∫≠p</button>
      </div>

      <div className="grn-details-content">
        <div className="grn-info-section">
          <h3>Th√¥ng tin chung</h3>
          <div className="grn-info-grid">
            <div className="info-item">
              <span className="info-label">S·ªë tham chi·∫øu:</span>
              <span className="info-value">{grn.grn_number || 'N/A'}</span>
            </div>
            <div className="info-item">
              <span className="info-label">M√£ h√≥a ƒë∆°n:</span>
              <span className="info-value">{grn.po_reference || 'N/A'}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Ng√†y t·∫°o:</span>
              <span className="info-value">{formatDate(grn.created_at)}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Nh√† cung c·∫•p:</span>
              <span className="info-value">{grn.supplier_name || 'Kh√¥ng x√°c ƒë·ªãnh'}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Ng∆∞·ªùi t·∫°o:</span>
              <span className="info-value">{grn.received_by_name || 'Kh√¥ng x√°c ƒë·ªãnh'}</span>
            </div>
          </div>
        </div>

        <div className="grn-supplier-section">
          <h3>Th√¥ng tin Nh√† cung c·∫•p</h3>
          {supplier ? (
            <div className="grn-info-grid">
              <div className="info-item">
                <span className="info-label">T√™n NCC:</span>
                <span className="info-value">{supplier.name}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Ng∆∞·ªùi li√™n h·ªá:</span>
                <span className="info-value">{supplier.contact_person || 'Kh√¥ng c√≥'}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Email:</span>
                <span className="info-value">{supplier.email || 'Kh√¥ng c√≥'}</span>
              </div>
              <div className="info-item">
                <span className="info-label">ƒêi·ªán tho·∫°i:</span>
                <span className="info-value">{supplier.phone || 'Kh√¥ng c√≥'}</span>
              </div>
              <div className="info-item">
                <span className="info-label">ƒê·ªãa ch·ªâ:</span>
                <span className="info-value">{supplier.address || 'Kh√¥ng c√≥'}</span>
              </div>
            </div>
          ) : (
            <p className="no-data-message">Kh√¥ng c√≥ th√¥ng tin nh√† cung c·∫•p</p>
          )}
        </div>

        <div className="grn-items-section">
          <h3>Danh s√°ch s·∫£n ph·∫©m nh·∫≠p</h3>
          <div className="table-container">
            <table className="grn-items-table">
              <thead>
                <tr>
                  <th className="item-name-col">T√™n s·∫£n ph·∫©m</th>
                  <th className="item-code-col">M√£ h√†ng</th>
                  <th className="quantity-col">S·ªë l∆∞·ª£ng</th>
                  <th className="price-col">Gi√° nh·∫≠p</th>
                  <th className="price-col">Gi√° b√°n</th>
                  <th className="total-col">Th√†nh ti·ªÅn</th>
                </tr>
              </thead>

              <tbody>
                {(grn.items || []).length > 0 ? (
                  grn.items.map((item, index) => (
                    <tr key={index}>
                      <td className="item-name-col">{item.name || item.item_name || 'Kh√¥ng x√°c ƒë·ªãnh'}</td>
                      <td className="item-code-col">{item.display_barcode || item.barcode || item.sku || 'Kh√¥ng c√≥'}</td>
                      <td className="quantity-col">
                        {item.quantity || item.received_quantity || 0}
                        <span className="unit-badge">{translateUnit(item.unit)}</span>
                      </td>
                      <td className="price-col">{formatCurrency(item.unit_price)}</td>
                      <td className="price-col">
                        {item.selling_price
                          ? formatCurrency(item.selling_price)
                          : 'Ch∆∞a c·∫≠p nh·∫≠t'}
                      </td>
                      <td className="total-col">{formatCurrency(calculateItemTotal(item))}</td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className="no-items">Kh√¥ng c√≥ s·∫£n ph·∫©m trong phi·∫øu nh·∫≠p n√†y</td>
                  </tr>
                )}
              </tbody>
              <tfoot>
                <tr>
                  <td colSpan="5" className="total-label">T·ªïng c·ªông:</td>
                  <td className="total-value">{formatCurrency(grn.total_amount)}</td>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>

        <div className="grn-notes-section">
          <h3>Ghi ch√∫</h3>
          {grn.notes ? (
            <p className="notes-content">{grn.notes}</p>
          ) : (
            <p className="no-notes">Kh√¥ng c√≥ ghi ch√∫ cho phi·∫øu nh·∫≠p n√†y</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default GRNDetails;

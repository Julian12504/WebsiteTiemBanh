import { useState, useEffect, useContext } from 'react';
import { StoreContext } from '../../context/StoreContext';
import axios from 'axios';
import { toast } from 'react-toastify';
import './MyOrders.css';

const MyOrders = () => {
  const { url, token, logout } = useContext(StoreContext);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedOrderId, setExpandedOrderId] = useState(null);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [selectedOrderId, setSelectedOrderId] = useState(null);

  // üîπ ƒê·ªãnh d·∫°ng ti·ªÅn VNƒê
  const formatCurrency = (amount) => {
    if (isNaN(amount)) return '0 ‚Ç´';
    return amount.toLocaleString('vi-VN') + ' ‚Ç´';
  };

  // üîπ ƒê·ªãnh d·∫°ng ng√†y gi·ªù theo chu·∫©n Vi·ªát Nam
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('vi-VN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  useEffect(() => {
    const fetchOrders = async () => {
      const authToken = token || localStorage.getItem("token");
      
      if (!authToken) {
        setLoading(false);
        setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng c·ªßa b·∫°n");
        return;
      }

      try {
        setLoading(true);
        const response = await axios.get(
          `${url}/api/order/user/orders`,
          { headers: { Authorization: `Bearer ${authToken}` } }
        );

        console.log("K·∫øt qu·∫£ API ƒë∆°n h√†ng:", response.data);

        if (response.data.success) {
          setOrders(response.data.data);
        } else {
          setError(response.data.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng");
        }
      } catch (err) {
        console.error("L·ªói khi t·∫£i ƒë∆°n h√†ng:", err);
        if (err.response?.status === 401) {
          localStorage.removeItem("token");
          logout();
        }
        setError(err.response?.data?.message || "L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng");
      } finally {
        setLoading(false);
      }
    };

    const timer = setTimeout(() => {
      fetchOrders();
    }, 300);

    return () => clearTimeout(timer);
  }, [url, token, logout]);

  const toggleOrderDetails = (orderId) => {
    setExpandedOrderId((prev) => (prev === orderId ? null : orderId));
  };

  // M·ªü modal x√°c nh·∫≠n
  const openConfirmModal = (orderId) => {
    setSelectedOrderId(orderId);
    setShowConfirmModal(true);
  };

  // ƒê√≥ng modal
  const closeConfirmModal = () => {
    setShowConfirmModal(false);
    setSelectedOrderId(null);
  };

  // X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng
  const confirmReceived = async () => {
    const authToken = token || localStorage.getItem("token");
    
    if (!authToken) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p");
      closeConfirmModal();
      return;
    }

    try {
      const response = await axios.post(
        `${url}/api/order/confirm-received`,
        { orderId: selectedOrderId },
        { headers: { Authorization: `Bearer ${authToken}` } }
      );

      if (response.data.success) {
        toast.success("ƒê√£ x√°c nh·∫≠n nh·∫≠n h√†ng th√†nh c√¥ng!");
        // Update local state
        setOrders(orders.map(order => 
          order.id === selectedOrderId 
            ? { ...order, status: 'Delivered' }
            : order
        ));
      } else {
        toast.error(response.data.message || "Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n h√†ng");
      }
    } catch (err) {
      console.error("L·ªói khi x√°c nh·∫≠n nh·∫≠n h√†ng:", err);
      toast.error(err.response?.data?.message || "L·ªói khi x√°c nh·∫≠n nh·∫≠n h√†ng");
    } finally {
      closeConfirmModal();
    }
  };

  const getStatusClass = (status) => {
    switch (status) {
      case 'Item Processing':
      case 'ƒêang x·ª≠ l√Ω':
        return 'status-processing';
      case 'Out for Delivery':
      case 'ƒêang giao h√†ng':
        return 'status-delivery';
      case 'Delivered':
      case 'ƒê√£ giao':
        return 'status-delivered';
      case 'Cancelled':
      case 'ƒê√£ h·ªßy':
        return 'status-cancelled';
      default:
        return '';
    }
  };

  // D·ªãch tr·∫°ng th√°i ƒë∆°n h√†ng sang ti·∫øng Vi·ªát
  const translateStatus = (status) => {
    switch (status) {
      case 'Item Processing':
        return 'ƒêang x·ª≠ l√Ω';
      case 'Out for Delivery':
        return 'ƒêang giao h√†ng';
      case 'Delivered':
        return 'ƒê√£ giao';
      case 'Cancelled':
        return 'ƒê√£ h·ªßy';
      default:
        return status;
    }
  };

  // ‚è≥ Khi ƒëang t·∫£i
  if (loading) {
    return <div className="my-orders-container loading">ƒêang t·∫£i ƒë∆°n h√†ng c·ªßa b·∫°n...</div>;
  }

  // ‚ö†Ô∏è Khi c√≥ l·ªói
  if (error) {
    return <div className="my-orders-container error-message">{error}</div>;
  }

  // üõí Khi kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
  if (orders.length === 0) {
    return (
      <div className="my-orders-container no-orders">
        <h2>ƒê∆°n h√†ng c·ªßa b·∫°n</h2>
        <p>B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>
        <a href="/" className="shop-now-btn">Mua ngay</a>
      </div>
    );
  }

  // ‚úÖ Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng
  return (
    <>
      <div className="my-orders-container">
        <h2>ƒê∆°n h√†ng c·ªßa b·∫°n</h2>
        
        <div className="orders-list">
        {orders.map((order) => (
          <div className="order-card" key={order.id}>
            <div 
              className="order-header" 
              onClick={() => toggleOrderDetails(order.id)}
            >
              <div className="order-summary">
                <h3>ƒê∆°n h√†ng #{order.id}</h3>
                <p className="order-date">{formatDate(order.created_at)}</p>
              </div>
              
              <div className="order-meta">
                <div className="meta-item">
                  <span className="meta-label">Tr·∫°ng th√°i ƒë∆°n h√†ng:</span>
                  <span className={`order-status ${getStatusClass(order.status)}`}>
                    {translateStatus(order.status)}
                  </span>
                </div>

                <div className="meta-item">
                  <span className="meta-label">Tr·∫°ng th√°i thanh to√°n:</span>
                  <span className={`payment-status ${order.payment ? 'paid' : 'unpaid'}`}>
                    {order.payment ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}
                  </span>
                </div>

                <div className="meta-item">
                  <span className="meta-label">T·ªïng ti·ªÅn:</span>
                  <span className="order-amount">{formatCurrency(order.amount)}</span>
                </div>
              </div>
              
              <button className="toggle-details">
                {expandedOrderId === order.id ? '·∫®n chi ti·∫øt' : 'Xem chi ti·∫øt'}
              </button>
            </div>
            
            {expandedOrderId === order.id && (
              <div className="order-details">
                <div className="delivery-info">
                  <h4>Th√¥ng tin giao h√†ng</h4>
                  <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {order.firstName} {order.lastName}</p>
                  <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {order.contactNumber1}</p>
                  {order.contactNumber2 && (
                    <p><strong>Li√™n h·ªá kh√°c:</strong> {order.contactNumber2}</p>
                  )}
                  <p><strong>ƒê·ªãa ch·ªâ:</strong> {order.address}</p>
                  {order.specialInstructions && (
                    <p><strong>Ghi ch√∫:</strong> {order.specialInstructions}</p>
                  )}
                </div>
                
                <div className="items-list">
                  <h4>S·∫£n ph·∫©m ƒë√£ ƒë·∫∑t</h4>
                  <table>
                    <thead>
                      <tr>
                        <th>S·∫£n ph·∫©m</th>
                        <th>ƒê∆°n gi√°</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>T·ªïng</th>
                      </tr>
                    </thead>
                    <tbody>
                      {order.items && order.items.map((item) => (
                        <tr key={item.id}>
                          <td>{item.name}</td>
                          <td>{formatCurrency(item.price)}</td>
                          <td>{item.quantity}</td>
                          <td>{formatCurrency(item.price * item.quantity)}</td>
                        </tr>
                      ))}
                      <tr className="delivery-fee">
                        <td colSpan="3">Ph√≠ giao h√†ng</td>
                        <td>{formatCurrency(15000)}</td>
                      </tr>
                      <tr className="order-total">
                        <td colSpan="3"><strong>T·ªïng c·ªông</strong></td>
                        <td><strong>{formatCurrency(order.amount)}</strong></td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                {/* N√∫t x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng */}
                {order.status === 'Out for Delivery' && (
                  <div className="order-actions">
                    <button 
                      className="confirm-received-btn"
                      onClick={(e) => {
                        e.stopPropagation();
                        openConfirmModal(order.id);
                      }}
                    >
                      ‚úì X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>

    {/* Modal x√°c nh·∫≠n */}
    {showConfirmModal && (
      <div className="confirm-modal-overlay" onClick={closeConfirmModal}>
        <div className="confirm-modal" onClick={(e) => e.stopPropagation()}>
          <div className="modal-icon">
            <svg width="60" height="60" viewBox="0 0 24 24" fill="none">
              <circle cx="12" cy="12" r="10" stroke="#28a745" strokeWidth="2"/>
              <path d="M8 12l2 2 4-4" stroke="#28a745" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </div>
          <h3>X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng</h3>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng?</p>
          <p className="modal-note">Sau khi x√°c nh·∫≠n, tr·∫°ng th√°i ƒë∆°n h√†ng s·∫Ω chuy·ªÉn th√†nh "ƒê√£ giao"</p>
          <div className="modal-actions">
            <button className="modal-btn cancel-btn" onClick={closeConfirmModal}>
              H·ªßy
            </button>
            <button className="modal-btn confirm-btn" onClick={confirmReceived}>
              X√°c nh·∫≠n
            </button>
          </div>
        </div>
      </div>
    )}
  </>
  );
};

export default MyOrders;
